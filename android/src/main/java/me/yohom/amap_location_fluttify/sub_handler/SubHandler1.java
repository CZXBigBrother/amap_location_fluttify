//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_location_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.amap_location_fluttify.AmapLocationFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler1 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished", (args, methodResult) -> {
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                List<com.amap.api.fence.GeoFence> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    var1.add((com.amap.api.fence.GeoFence) getHEAP().get(refId));
                }
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceListener ref = (com.amap.api.fence.GeoFenceListener) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceListener@" + refId + "::onGeoFenceCreateFinished(" + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                try {
                    ref.onGeoFenceCreateFinished(new ArrayList(var1), var2, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getFenceId", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getFenceId(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getFenceId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setFenceId", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setFenceId(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setFenceId(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getCustomId", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getCustomId(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getCustomId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setCustomId", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setCustomId(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setCustomId(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getPendingIntentAction", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getPendingIntentAction(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getPendingIntentAction();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setPendingIntentAction", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setPendingIntentAction(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPendingIntentAction(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getPendingIntent", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getPendingIntent(" + "" + ")");
                }
            
                // invoke native method
                android.app.PendingIntent result;
                try {
                    result = ref.getPendingIntent();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setPendingIntent", (args, methodResult) -> {
                // args
                // ref arg
                android.app.PendingIntent var1 = (android.app.PendingIntent) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setPendingIntent(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPendingIntent(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getType", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getType(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getType();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setType", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setType(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setType(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getPoiItem", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getPoiItem(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.fence.PoiItem result;
                try {
                    result = ref.getPoiItem();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setPoiItem", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.fence.PoiItem var1 = (com.amap.api.fence.PoiItem) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setPoiItem(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPoiItem(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getDistrictItemList", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getDistrictItemList(" + "" + ")");
                }
            
                // invoke native method
                List<com.amap.api.fence.DistrictItem> result;
                try {
                    result = ref.getDistrictItemList();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.fence.DistrictItem item : result) {
                        getHEAP().put(item.hashCode(), item);
                        jsonableResult.add(item.hashCode());
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setDistrictItemList", (args, methodResult) -> {
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                List<com.amap.api.fence.DistrictItem> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    var1.add((com.amap.api.fence.DistrictItem) getHEAP().get(refId));
                }
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setDistrictItemList(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setDistrictItemList(new ArrayList(var1));
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setPointList", (args, methodResult) -> {
                // args
                List<List<com.amap.api.location.DPoint>> var1 = new ArrayList<>();
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setPointList(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPointList(new ArrayList(var1));
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getRadius", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getRadius(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getRadius();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setRadius", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setRadius(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setRadius(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getExpiration", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getExpiration(" + "" + ")");
                }
            
                // invoke native method
                long result;
                try {
                    result = ref.getExpiration();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setExpiration", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setExpiration(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setExpiration(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getActivatesAction", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getActivatesAction(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getActivatesAction();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setActivatesAction", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setActivatesAction(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setActivatesAction(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getStatus", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getStatus(" + "" + ")");
                }
            
                // invoke native method
                int result;
                try {
                    result = ref.getStatus();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setStatus", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setStatus(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setStatus(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getEnterTime", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getEnterTime(" + "" + ")");
                }
            
                // invoke native method
                long result;
                try {
                    result = ref.getEnterTime();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setEnterTime", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setEnterTime(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setEnterTime(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getCenter", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getCenter(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.location.DPoint result;
                try {
                    result = ref.getCenter();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setCenter", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.location.DPoint var1 = (com.amap.api.location.DPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setCenter(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setCenter(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getMinDis2Center", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getMinDis2Center(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getMinDis2Center();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setMinDis2Center", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setMinDis2Center(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setMinDis2Center(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getMaxDis2Center", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getMaxDis2Center(" + "" + ")");
                }
            
                // invoke native method
                float result;
                try {
                    result = ref.getMaxDis2Center();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setMaxDis2Center", (args, methodResult) -> {
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setMaxDis2Center(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setMaxDis2Center(new Double(var1).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::isAble", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::isAble(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isAble();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setAble", (args, methodResult) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setAble(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setAble(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::setCurrentLocation", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.location.AMapLocation var1 = (com.amap.api.location.AMapLocation) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::setCurrentLocation(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setCurrentLocation(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFence::getCurrentLocation", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFence ref = (com.amap.api.fence.GeoFence) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFence@" + refId + "::getCurrentLocation(" + "" + ")");
                }
            
                // invoke native method
                com.amap.api.location.AMapLocation result;
                try {
                    result = ref.getCurrentLocation();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::createPendingIntent", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::createPendingIntent(" + var1 + ")");
                }
            
                // invoke native method
                android.app.PendingIntent result;
                try {
                    result = ref.createPendingIntent(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (result != null) {
                    jsonableResult = result.hashCode();
                    getHEAP().put(jsonableResult, result);
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::setActivateAction", (args, methodResult) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::setActivateAction(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setActivateAction(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::setGeoFenceListener", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::setGeoFenceListener(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.setGeoFenceListener(new com.amap.api.fence.GeoFenceListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "com.amap.api.fence.GeoFenceManagerBase::setGeoFenceListener::Callback");
            
                    // call dart method
                    @Override
                    public void onGeoFenceCreateFinished(List<com.amap.api.fence.GeoFence> var1, int var2, String var3) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onGeoFenceCreateFinished(" + var1 + var2 + var3 + ")");
                        }
            
                        // convert to jsonable data
                        // list arg
                        List<Integer> argvar1 = new ArrayList<>();
                        for (com.amap.api.fence.GeoFence item : var1) {
                            getHEAP().put(item.hashCode(), item);
                            argvar1.add(item.hashCode());
                        }
                        // jsonable arg
                        int argvar2 = var2;
                        // jsonable arg
                        String argvar3 = var3;
            
                        // call dart method
                        callbackChannel.invokeMethod(
                                "Callback::com.amap.api.fence.GeoFenceListener::onGeoFenceCreateFinished",
                                new HashMap<String, Object>() {{
                                    put("var1", argvar1);
                                    put("var2", argvar2);
                                    put("var3", argvar3);
                                }}
                        );
            
                        // method result
            
                    }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::addRoundGeoFence", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.location.DPoint var1 = (com.amap.api.location.DPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::addRoundGeoFence(" + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                try {
                    ref.addRoundGeoFence(var1, new Double(var2).floatValue(), var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::addPolygonGeoFence", (args, methodResult) -> {
                // args
                // list arg
                List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) args).get("var1");
                List<com.amap.api.location.DPoint> var1 = new ArrayList<>();
                for (int refId : var1RefIdList) {
                    var1.add((com.amap.api.location.DPoint) getHEAP().get(refId));
                }
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::addPolygonGeoFence(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.addPolygonGeoFence(new ArrayList(var1), var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::addNearbyGeoFence", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // ref arg
                com.amap.api.location.DPoint var3 = (com.amap.api.location.DPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
                // jsonable arg
                String var6 = (String) ((Map<String, Object>) args).get("var6");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::addNearbyGeoFence(" + var1 + var2 + var3 + var4 + var5 + var6 + ")");
                }
            
                // invoke native method
                try {
                    ref.addNearbyGeoFence(var1, var2, var3, new Double(var4).floatValue(), var5, var6);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::addKeywordGeoFence", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                String var5 = (String) ((Map<String, Object>) args).get("var5");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::addKeywordGeoFence(" + var1 + var2 + var3 + var4 + var5 + ")");
                }
            
                // invoke native method
                try {
                    ref.addKeywordGeoFence(var1, var2, var3, var4, var5);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::addDistrictGeoFence", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::addDistrictGeoFence(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.addDistrictGeoFence(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::removeGeoFence", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::removeGeoFence(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeGeoFence();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::removeGeoFence__com_amap_api_fence_GeoFence", (args, methodResult) -> {
                // args
                // ref arg
                com.amap.api.fence.GeoFence var1 = (com.amap.api.fence.GeoFence) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::removeGeoFence(" + var1 + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.removeGeoFence(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::getAllGeoFence", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::getAllGeoFence(" + "" + ")");
                }
            
                // invoke native method
                List<com.amap.api.fence.GeoFence> result;
                try {
                    result = ref.getAllGeoFence();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (result != null) {
                    jsonableResult = new ArrayList<>();
                    for (com.amap.api.fence.GeoFence item : result) {
                        getHEAP().put(item.hashCode(), item);
                        jsonableResult.add(item.hashCode());
                    }
                }
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::setGeoFenceAble", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                boolean var2 = (boolean) ((Map<String, Object>) args).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::setGeoFenceAble(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.setGeoFenceAble(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::pauseGeoFence", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::pauseGeoFence(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.pauseGeoFence();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::resumeGeoFence", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::resumeGeoFence(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.resumeGeoFence();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.GeoFenceManagerBase::isPause", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.GeoFenceManagerBase ref = (com.amap.api.fence.GeoFenceManagerBase) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.GeoFenceManagerBase@" + refId + "::isPause(" + "" + ")");
                }
            
                // invoke native method
                boolean result;
                try {
                    result = ref.isPause();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getLatitude", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getLatitude(" + "" + ")");
                }
            
                // invoke native method
                double result;
                try {
                    result = ref.getLatitude();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                double jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setLatitude", (args, methodResult) -> {
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setLatitude(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setLatitude(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getLongitude", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getLongitude(" + "" + ")");
                }
            
                // invoke native method
                double result;
                try {
                    result = ref.getLongitude();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                double jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setLongitude", (args, methodResult) -> {
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setLongitude(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setLongitude(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getPoiId", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getPoiId(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getPoiId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setPoiId", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setPoiId(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPoiId(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getPoiType", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getPoiType(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getPoiType();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setPoiType", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setPoiType(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPoiType(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getTypeCode", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getTypeCode(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getTypeCode();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setTypeCode", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setTypeCode(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setTypeCode(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getAddress", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getAddress(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getAddress();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setAddress", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setAddress(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setAddress(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getTel", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getTel(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getTel();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setTel", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setTel(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setTel(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getProvince", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getProvince(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getProvince();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setProvince", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setProvince(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setProvince(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getCity", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getCity(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getCity();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setCity", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setCity(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setCity(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getAdname", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getAdname(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getAdname();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::getPoiName", (args, methodResult) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::getPoiName(" + "" + ")");
                }
            
                // invoke native method
                String result;
                try {
                    result = ref.getPoiName();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = result;
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setPoiName", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setPoiName(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setPoiName(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.fence.PoiItem::setAdname", (args, methodResult) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) args).get("refId");
                com.amap.api.fence.PoiItem ref = (com.amap.api.fence.PoiItem) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: com.amap.api.fence.PoiItem@" + refId + "::setAdname(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setAdname(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                methodResult.success(jsonableResult);
            });
            // method
            put("com.amap.api.location.LocationManagerBase::setLocationOption_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.amap.api.location.AMapLocationClientOption var1 = (com.amap.api.location.AMapLocationClientOption) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLocationOption(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.LocationManagerBase::startLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.startLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.LocationManagerBase::stopLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.LocationManagerBase::getLastKnownLocation_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocation result;
                    try {
                        result = ref.getLastKnownLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.LocationManagerBase::startAssistantLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.startAssistantLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.LocationManagerBase::stopAssistantLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopAssistantLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.LocationManagerBase::isStarted_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isStarted();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.LocationManagerBase::onDestroy_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onDestroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.LocationManagerBase::enableBackgroundLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    android.app.Notification var2 = (android.app.Notification) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.enableBackgroundLocation(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.LocationManagerBase::disableBackgroundLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.LocationManagerBase ref = (com.amap.api.location.LocationManagerBase) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.disableBackgroundLocation(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::setLocationOption_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.amap.api.location.AMapLocationClientOption var1 = (com.amap.api.location.AMapLocationClientOption) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLocationOption(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::startLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.startLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::stopLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::getLastKnownLocation_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocation result;
                    try {
                        result = ref.getLastKnownLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::startAssistantLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.startAssistantLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::stopAssistantLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopAssistantLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::getVersion_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getVersion();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::setApiKey_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.location.AMapLocationClient.setApiKey(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::isStarted_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isStarted();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::onDestroy_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onDestroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::enableBackgroundLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    android.app.Notification var2 = (android.app.Notification) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.enableBackgroundLocation(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::disableBackgroundLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClient ref = (com.amap.api.location.AMapLocationClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.disableBackgroundLocation(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClient::getDeviceId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.amap.api.location.AMapLocationClient.getDeviceId(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationListener::onLocationChanged_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.amap.api.location.AMapLocation var1 = (com.amap.api.location.AMapLocation) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationListener ref = (com.amap.api.location.AMapLocationListener) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onLocationChanged(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.DPoint::getLongitude_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.DPoint ref = (com.amap.api.location.DPoint) getHEAP().get(refId);
            
                    // invoke native method
                    double result;
                    try {
                        result = ref.getLongitude();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.DPoint::setLongitude_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.DPoint ref = (com.amap.api.location.DPoint) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLongitude(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.DPoint::getLatitude_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.DPoint ref = (com.amap.api.location.DPoint) getHEAP().get(refId);
            
                    // invoke native method
                    double result;
                    try {
                        result = ref.getLatitude();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.DPoint::setLatitude_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.DPoint ref = (com.amap.api.location.DPoint) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLatitude(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.CoordinateConverter::from_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // enum arg
                    com.amap.api.location.CoordinateConverter.CoordType var1 = com.amap.api.location.CoordinateConverter.CoordType.values()[(int) ((Map<String, Object>) args).get("var1")];
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.CoordinateConverter ref = (com.amap.api.location.CoordinateConverter) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.CoordinateConverter result;
                    try {
                        result = ref.from(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.CoordinateConverter::coord_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.amap.api.location.DPoint var1 = (com.amap.api.location.DPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.CoordinateConverter ref = (com.amap.api.location.CoordinateConverter) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.CoordinateConverter result;
                    try {
                        result = ref.coord(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.CoordinateConverter::convert_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.CoordinateConverter ref = (com.amap.api.location.CoordinateConverter) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.DPoint result;
                    try {
                        result = ref.convert();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.CoordinateConverter::isAMapDataAvailable_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    double var0 = (double) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    double var2 = (double) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = com.amap.api.location.CoordinateConverter.isAMapDataAvailable(var0, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.CoordinateConverter::calculateLineDistance_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.amap.api.location.DPoint var0 = (com.amap.api.location.DPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // ref arg
                    com.amap.api.location.DPoint var1 = (com.amap.api.location.DPoint) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
            
            
                    // invoke native method
                    float result;
                    try {
                        result = com.amap.api.location.CoordinateConverter.calculateLineDistance(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.CoordUtil::convertToGcj_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    double[] var0 = (double[]) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    double[] var1 = (double[]) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.amap.api.location.CoordUtil.convertToGcj(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.CoordUtil::isLoadedSo_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = com.amap.api.location.CoordUtil.isLoadedSo();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.CoordUtil::setLoadedSo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var0 = (boolean) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.location.CoordUtil.setLoadedSo(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol::getValue_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol ref = (com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getValue();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.UmidtokenInfo::getUmidtoken_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.amap.api.location.UmidtokenInfo.getUmidtoken();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.UmidtokenInfo::setLocAble_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var0 = (boolean) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.location.UmidtokenInfo.setLocAble(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.UmidtokenInfo::setUmidtoken_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.location.UmidtokenInfo.setUmidtoken(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getGpsAccuracyStatus_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getGpsAccuracyStatus();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setGpsAccuracyStatus_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setGpsAccuracyStatus(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getLocationType_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getLocationType();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setLocationType_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLocationType(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getLocationDetail_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getLocationDetail();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setLocationDetail_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLocationDetail(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getErrorCode_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getErrorCode();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setErrorCode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setErrorCode(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getErrorInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getErrorInfo();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setErrorInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setErrorInfo(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getCountry_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getCountry();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setCountry_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCountry(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getRoad_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getRoad();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setRoad_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setRoad(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getAddress_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getAddress();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setAddress_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setAddress(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getProvince_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getProvince();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setProvince_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setProvince(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getCity_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getCity();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setCity_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCity(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getDistrict_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getDistrict();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setDistrict_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setDistrict(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getCityCode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getCityCode();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setCityCode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCityCode(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getAdCode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getAdCode();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setAdCode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setAdCode(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getPoiName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getPoiName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setPoiName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setPoiName(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getLatitude_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    double result;
                    try {
                        result = ref.getLatitude();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setLatitude_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLatitude(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getLongitude_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    double result;
                    try {
                        result = ref.getLongitude();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setLongitude_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLongitude(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getSatellites_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getSatellites();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setSatellites_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setSatellites(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getStreet_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getStreet();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setStreet_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setStreet(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getStreetNum_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getStreetNum();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setNumber_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setNumber(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setOffset_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setOffset(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::isOffset_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isOffset();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getAoiName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getAoiName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setAoiName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setAoiName(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getBuildingId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getBuildingId();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setBuildingId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setBuildingId(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getFloor_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getFloor();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::isFixLastLocation_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isFixLastLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setFixLastLocation_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setFixLastLocation(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setFloor_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setFloor(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::isMock_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isMock();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setMock_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMock(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getDescription_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getDescription();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setDescription_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setDescription(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::toStr_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.toStr();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::toStr__int_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.toStr(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getAccuracy_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    float result;
                    try {
                        result = ref.getAccuracy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getBearing_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    float result;
                    try {
                        result = ref.getBearing();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getAltitude_batch", (argsBatch, methodResult) -> {
                List<Double> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    double result;
                    try {
                        result = ref.getAltitude();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getSpeed_batch", (argsBatch, methodResult) -> {
                List<Float> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    float result;
                    try {
                        result = ref.getSpeed();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getProvider_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getProvider();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::clone_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocation result;
                    try {
                        result = ref.clone();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getLocationQualityReport_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationQualityReport result;
                    try {
                        result = ref.getLocationQualityReport();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setLocationQualityReport_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.amap.api.location.AMapLocationQualityReport var1 = (com.amap.api.location.AMapLocationQualityReport) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLocationQualityReport(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getCoordType_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getCoordType();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setCoordType_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCoordType(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setTrustedLevel_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setTrustedLevel(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getTrustedLevel_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getTrustedLevel();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::getConScenario_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getConScenario();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocation::setConScenario_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocation ref = (com.amap.api.location.AMapLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setConScenario(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::getAPIKEY_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.amap.api.location.AMapLocationClientOption.getAPIKEY();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::isMockEnable_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isMockEnable();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::setMockEnable_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationClientOption result;
                    try {
                        result = ref.setMockEnable(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::getInterval_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.getInterval();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::setInterval_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationClientOption result;
                    try {
                        result = ref.setInterval(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::isOnceLocation_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isOnceLocation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::setOnceLocation_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationClientOption result;
                    try {
                        result = ref.setOnceLocation(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::isNeedAddress_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isNeedAddress();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::setNeedAddress_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationClientOption result;
                    try {
                        result = ref.setNeedAddress(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::isWifiActiveScan_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isWifiActiveScan();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::setWifiActiveScan_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationClientOption result;
                    try {
                        result = ref.setWifiActiveScan(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::isWifiScan_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isWifiScan();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::setWifiScan_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationClientOption result;
                    try {
                        result = ref.setWifiScan(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::getLocationMode_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationClientOption.AMapLocationMode result;
                    try {
                        result = ref.getLocationMode();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::setLocationMode_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // enum arg
                    com.amap.api.location.AMapLocationClientOption.AMapLocationMode var1 = com.amap.api.location.AMapLocationClientOption.AMapLocationMode.values()[(int) ((Map<String, Object>) args).get("var1")];
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationClientOption result;
                    try {
                        result = ref.setLocationMode(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::getLocationProtocol_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol result;
                    try {
                        result = ref.getLocationProtocol();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::setLocationProtocol_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // enum arg
                    com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol var0 = com.amap.api.location.AMapLocationClientOption.AMapLocationProtocol.values()[(int) ((Map<String, Object>) args).get("var0")];
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.amap.api.location.AMapLocationClientOption.setLocationProtocol(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::isKillProcess_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isKillProcess();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.amap.api.location.AMapLocationClientOption::setKillProcess_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.amap.api.location.AMapLocationClientOption ref = (com.amap.api.location.AMapLocationClientOption) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.location.AMapLocationClientOption result;
                    try {
                        result = ref.setKillProcess(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
