//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "AmapLocationFluttifyPlugin.h"
#import <objc/runtime.h>

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, id, FlutterResult);

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapLocationFluttifyPlugin {
  NSObject <FlutterPluginRegistrar> * _registrar;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{
      @"AMapGeoFenceManager::addCircleRegionForMonitoringWithCenterRadiuscustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
          CLLocationCoordinate2D center;
          [centerValue getValue:&center];
          // jsonable arg
          CLLocationDistance radius = [args[@"radius"] doubleValue];
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::addCircleRegionForMonitoringWithCenter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addCircleRegionForMonitoringWithCenter : center radius: radius customID: customID];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::addPolygonRegionForMonitoringWithCoordinatesCountcustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
          CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
      
          for (int i = 0; i < coordinatesRefIdArray.count; i++) {
              NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordinatesItem;
              [coordinatesValue getValue:&coordinatesItem];
              coordinates[i] = coordinatesItem;
          }
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::addPolygonRegionForMonitoringWithCoordinates(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addPolygonRegionForMonitoringWithCoordinates : coordinates count: count customID: customID];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::addKeywordPOIRegionForMonitoringWithKeywordPOITypecitysizecustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* keyword = (NSString*) args[@"keyword"];
          // jsonable arg
          NSString* type = (NSString*) args[@"type"];
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
          // jsonable arg
          NSInteger size = [args[@"size"] integerValue];
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::addKeywordPOIRegionForMonitoringWithKeyword(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addKeywordPOIRegionForMonitoringWithKeyword : keyword POIType: type city: city size: size customID: customID];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::addAroundPOIRegionForMonitoringWithLocationPointAroundRadiuskeywordPOITypesizecustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* locationPointValue = (NSValue*) HEAP[@([args[@"locationPoint"] integerValue])];
          CLLocationCoordinate2D locationPoint;
          [locationPointValue getValue:&locationPoint];
          // jsonable arg
          NSInteger aroundRadius = [args[@"aroundRadius"] integerValue];
          // jsonable arg
          NSString* keyword = (NSString*) args[@"keyword"];
          // jsonable arg
          NSString* type = (NSString*) args[@"type"];
          // jsonable arg
          NSInteger size = [args[@"size"] integerValue];
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::addAroundPOIRegionForMonitoringWithLocationPoint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addAroundPOIRegionForMonitoringWithLocationPoint : locationPoint aroundRadius: aroundRadius keyword: keyword POIType: type size: size customID: customID];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::addDistrictRegionForMonitoringWithDistrictNameCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* districtName = (NSString*) args[@"districtName"];
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::addDistrictRegionForMonitoringWithDistrictName(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addDistrictRegionForMonitoringWithDistrictName : districtName customID: customID];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::statusWithGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP[@([args[@"region"] integerValue])];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::statusWithGeoFenceRegion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          AMapGeoFenceRegionActiveStatus result = [ref statusWithGeoFenceRegion: region];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::geoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::geoFenceRegionsWithCustomID(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSArray* result = [ref geoFenceRegionsWithCustomID: customID];
      
          // result
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::monitoringGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::monitoringGeoFenceRegionsWithCustomID(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSArray* result = [ref monitoringGeoFenceRegionsWithCustomID: customID];
      
          // result
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::pausedGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::pausedGeoFenceRegionsWithCustomID(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSArray* result = [ref pausedGeoFenceRegionsWithCustomID: customID];
      
          // result
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::pauseGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::pauseGeoFenceRegionsWithCustomID(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSArray* result = [ref pauseGeoFenceRegionsWithCustomID: customID];
      
          // result
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::pauseTheGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP[@([args[@"region"] integerValue])];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::pauseTheGeoFenceRegion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref pauseTheGeoFenceRegion: region];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::startGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::startGeoFenceRegionsWithCustomID(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSArray* result = [ref startGeoFenceRegionsWithCustomID: customID];
      
          // result
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::startTheGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP[@([args[@"region"] integerValue])];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::startTheGeoFenceRegion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref startTheGeoFenceRegion: region];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::removeTheGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP[@([args[@"region"] integerValue])];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::removeTheGeoFenceRegion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeTheGeoFenceRegion : region];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::removeGeoFenceRegionsWithCustomID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::removeGeoFenceRegionsWithCustomID(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeGeoFenceRegionsWithCustomID : customID];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::removeAllGeoFenceRegions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManager@%@::removeAllGeoFenceRegions(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeAllGeoFenceRegions ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDoRequireLocationAuth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapGeoFenceManager* manager = (AMapGeoFenceManager*) HEAP[@([args[@"manager"] integerValue])];
          // ref arg
          CLLocationManager* locationManager = (CLLocationManager*) HEAP[@([args[@"locationManager"] integerValue])];
      
          // ref
          id<AMapGeoFenceManagerDelegate> ref = (id<AMapGeoFenceManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManagerDelegate@%@::amapGeoFenceManager(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref amapGeoFenceManager : manager doRequireLocationAuth: locationManager];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidAddRegionForMonitoringFinishedcustomIDerror": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapGeoFenceManager* manager = (AMapGeoFenceManager*) HEAP[@([args[@"manager"] integerValue])];
          // list arg
          NSArray<NSNumber*>* regionsRefArray = (NSArray<NSNumber*> *) args[@"regions"];
          NSMutableArray<AMapGeoFenceRegion*>* regions = [NSMutableArray arrayWithCapacity:regionsRefArray.count];
          for (int i = 0; i < regionsRefArray.count; i++) {
              AMapGeoFenceRegion* item = (AMapGeoFenceRegion*) HEAP[[regionsRefArray objectAtIndex:i]];
              [regions addObject:item];
          }
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
          // ref arg
          NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<AMapGeoFenceManagerDelegate> ref = (id<AMapGeoFenceManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManagerDelegate@%@::amapGeoFenceManager(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref amapGeoFenceManager : manager didAddRegionForMonitoringFinished: regions customID: customID error: error];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidGeoFencesStatusChangedForRegioncustomIDerror": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapGeoFenceManager* manager = (AMapGeoFenceManager*) HEAP[@([args[@"manager"] integerValue])];
          // ref arg
          AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP[@([args[@"region"] integerValue])];
          // jsonable arg
          NSString* customID = (NSString*) args[@"customID"];
          // ref arg
          NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<AMapGeoFenceManagerDelegate> ref = (id<AMapGeoFenceManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapGeoFenceManagerDelegate@%@::amapGeoFenceManager(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref amapGeoFenceManager : manager didGeoFencesStatusChangedForRegion: region customID: customID error: error];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationRegion::initWithIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* identifier = (NSString*) args[@"identifier"];
      
          // ref
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationRegion@%@::initWithIdentifier(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          AMapLocationRegion* result = [ref initWithIdentifier: identifier];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"AMapLocationRegion::containsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // ref
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationRegion@%@::containsCoordinate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref containsCoordinate: coordinate];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"AMapLocationCircleRegion::initWithCenterRadiusidentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
          CLLocationCoordinate2D center;
          [centerValue getValue:&center];
          // jsonable arg
          CLLocationDistance radius = [args[@"radius"] doubleValue];
          // jsonable arg
          NSString* identifier = (NSString*) args[@"identifier"];
      
          // ref
          AMapLocationCircleRegion* ref = (AMapLocationCircleRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationCircleRegion@%@::initWithCenter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          AMapLocationCircleRegion* result = [ref initWithCenter: center radius: radius identifier: identifier];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"AMapLocationPolygonRegion::initWithCoordinatesCountidentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
          CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
      
          for (int i = 0; i < coordinatesRefIdArray.count; i++) {
              NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:i]];
              CLLocationCoordinate2D coordinatesItem;
              [coordinatesValue getValue:&coordinatesItem];
              coordinates[i] = coordinatesItem;
          }
          // jsonable arg
          NSInteger count = [args[@"count"] integerValue];
          // jsonable arg
          NSString* identifier = (NSString*) args[@"identifier"];
      
          // ref
          AMapLocationPolygonRegion* ref = (AMapLocationPolygonRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationPolygonRegion@%@::initWithCoordinates(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          AMapLocationPolygonRegion* result = [ref initWithCoordinates: coordinates count: count identifier: identifier];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManager::headingAvailable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManager::headingAvailable(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = [AMapLocationManager headingAvailable];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManager::startUpdatingHeading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManager@%@::startUpdatingHeading(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref startUpdatingHeading ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManager::stopUpdatingHeading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManager@%@::stopUpdatingHeading(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref stopUpdatingHeading ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManager::dismissHeadingCalibrationDisplay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManager@%@::dismissHeadingCalibrationDisplay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref dismissHeadingCalibrationDisplay ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManager::requestLocationWithReGeocodeCompletionBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL withReGeocode = [args[@"withReGeocode"] boolValue];
      
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManager@%@::requestLocationWithReGeocode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref requestLocationWithReGeocode: withReGeocode completionBlock: ^(CLLocation* location, AMapLocationReGeocode* regeocode, NSError* error) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"AMapLocationManager::requestLocationWithReGeocodeCompletionBlock::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* arglocation = @(location.hash);
              HEAP[arglocation] = location;
              // ref callback arg
              NSNumber* argregeocode = @(regeocode.hash);
              HEAP[argregeocode] = regeocode;
              // ref callback arg
              NSNumber* argerror = @(error.hash);
              HEAP[argerror] = error;
      
              [channel invokeMethod:@"Callback::AMapLocatingCompletionBlock::AMapLocatingCompletionBlock" arguments:@{@"location": arglocation, @"regeocode": argregeocode, @"error": argerror}];
      
          }];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManager::startUpdatingLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManager@%@::startUpdatingLocation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref startUpdatingLocation ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManager::stopUpdatingLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManager@%@::stopUpdatingLocation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref stopUpdatingLocation ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDoRequireLocationAuth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
          // ref arg
          CLLocationManager* locationManager = (CLLocationManager*) HEAP[@([args[@"locationManager"] integerValue])];
      
          // ref
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManager(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref amapLocationManager : manager doRequireLocationAuth: locationManager];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidFailWithError": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
          // ref arg
          NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManager(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref amapLocationManager : manager didFailWithError: error];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
          // ref arg
          CLLocation* location = (CLLocation*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManager(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref amapLocationManager : manager didUpdateLocation: location];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocationreGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
          // ref arg
          CLLocation* location = (CLLocation*) HEAP[@([args[@"location"] integerValue])];
          // ref arg
          AMapLocationReGeocode* reGeocode = (AMapLocationReGeocode*) HEAP[@([args[@"reGeocode"] integerValue])];
      
          // ref
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManager(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref amapLocationManager : manager didUpdateLocation: location reGeocode: reGeocode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidChangeAuthorizationStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
          // enum arg
          CLAuthorizationStatus status = (CLAuthorizationStatus) [args[@"status"] integerValue];
      
          // ref
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManager(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref amapLocationManager : manager didChangeAuthorizationStatus: status];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerShouldDisplayHeadingCalibration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
      
          // ref
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManagerShouldDisplayHeadingCalibration(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref amapLocationManagerShouldDisplayHeadingCalibration: manager];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidUpdateHeading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
          // ref arg
          CLHeading* newHeading = (CLHeading*) HEAP[@([args[@"newHeading"] integerValue])];
      
          // ref
          id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationManagerDelegate@%@::amapLocationManager(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref amapLocationManager : manager didUpdateHeading: newHeading];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"AMapLocationPoint::locationWithLatitudeLongitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat lat = [args[@"lat"] floatValue];
          // jsonable arg
          CGFloat lon = [args[@"lon"] floatValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationPoint::locationWithLatitude(暂未实现参数打印)");
          }
      
          // invoke native method
          AMapLocationPoint* result = [AMapLocationPoint locationWithLatitude: lat longitude: lon];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"AMapGeoFenceManager::addCircleRegionForMonitoringWithCenterRadiuscustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
              CLLocationCoordinate2D center;
              [centerValue getValue:&center];
              // jsonable arg
              CLLocationDistance radius = [args[@"radius"] doubleValue];
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addCircleRegionForMonitoringWithCenter : center radius: radius customID: customID];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::addPolygonRegionForMonitoringWithCoordinatesCountcustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
              CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
        
              for (int i = 0; i < coordinatesRefIdArray.count; i++) {
                  NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:i]];
                  CLLocationCoordinate2D coordinatesItem;
                  [coordinatesValue getValue:&coordinatesItem];
                  coordinates[i] = coordinatesItem;
              }
              // jsonable arg
              NSInteger count = [args[@"count"] integerValue];
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addPolygonRegionForMonitoringWithCoordinates : coordinates count: count customID: customID];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::addKeywordPOIRegionForMonitoringWithKeywordPOITypecitysizecustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* keyword = (NSString*) args[@"keyword"];
              // jsonable arg
              NSString* type = (NSString*) args[@"type"];
              // jsonable arg
              NSString* city = (NSString*) args[@"city"];
              // jsonable arg
              NSInteger size = [args[@"size"] integerValue];
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addKeywordPOIRegionForMonitoringWithKeyword : keyword POIType: type city: city size: size customID: customID];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::addAroundPOIRegionForMonitoringWithLocationPointAroundRadiuskeywordPOITypesizecustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* locationPointValue = (NSValue*) HEAP[@([args[@"locationPoint"] integerValue])];
              CLLocationCoordinate2D locationPoint;
              [locationPointValue getValue:&locationPoint];
              // jsonable arg
              NSInteger aroundRadius = [args[@"aroundRadius"] integerValue];
              // jsonable arg
              NSString* keyword = (NSString*) args[@"keyword"];
              // jsonable arg
              NSString* type = (NSString*) args[@"type"];
              // jsonable arg
              NSInteger size = [args[@"size"] integerValue];
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addAroundPOIRegionForMonitoringWithLocationPoint : locationPoint aroundRadius: aroundRadius keyword: keyword POIType: type size: size customID: customID];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::addDistrictRegionForMonitoringWithDistrictNameCustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* districtName = (NSString*) args[@"districtName"];
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref addDistrictRegionForMonitoringWithDistrictName : districtName customID: customID];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::statusWithGeoFenceRegion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP[@([args[@"region"] integerValue])];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              AMapGeoFenceRegionActiveStatus result = [ref statusWithGeoFenceRegion: region];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::geoFenceRegionsWithCustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSArray* result = [ref geoFenceRegionsWithCustomID: customID];
      
              // result
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::monitoringGeoFenceRegionsWithCustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSArray* result = [ref monitoringGeoFenceRegionsWithCustomID: customID];
      
              // result
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::pausedGeoFenceRegionsWithCustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSArray* result = [ref pausedGeoFenceRegionsWithCustomID: customID];
      
              // result
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::pauseGeoFenceRegionsWithCustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSArray* result = [ref pauseGeoFenceRegionsWithCustomID: customID];
      
              // result
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::pauseTheGeoFenceRegion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP[@([args[@"region"] integerValue])];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref pauseTheGeoFenceRegion: region];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::startGeoFenceRegionsWithCustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              NSArray* result = [ref startGeoFenceRegionsWithCustomID: customID];
      
              // result
              // 返回值: 列表
              NSMutableArray* jsonableResult = [NSMutableArray array];
              for (int i = 0; i < result.count; i++) {
                  NSObject* object = [result objectAtIndex:i];
                  [jsonableResult addObject: @(object.hash)];
                  HEAP[@([object hash])] = object;
              }
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::startTheGeoFenceRegion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP[@([args[@"region"] integerValue])];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref startTheGeoFenceRegion: region];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::removeTheGeoFenceRegion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP[@([args[@"region"] integerValue])];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref removeTheGeoFenceRegion : region];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::removeGeoFenceRegionsWithCustomID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref removeGeoFenceRegionsWithCustomID : customID];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::removeAllGeoFenceRegions_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref removeAllGeoFenceRegions ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDoRequireLocationAuth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapGeoFenceManager* manager = (AMapGeoFenceManager*) HEAP[@([args[@"manager"] integerValue])];
              // ref arg
              CLLocationManager* locationManager = (CLLocationManager*) HEAP[@([args[@"locationManager"] integerValue])];
      
              // ref
              id<AMapGeoFenceManagerDelegate> ref = (id<AMapGeoFenceManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref amapGeoFenceManager : manager doRequireLocationAuth: locationManager];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidAddRegionForMonitoringFinishedcustomIDerror_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapGeoFenceManager* manager = (AMapGeoFenceManager*) HEAP[@([args[@"manager"] integerValue])];
              // list arg
              NSArray<NSNumber*>* regionsRefArray = (NSArray<NSNumber*> *) args[@"regions"];
              NSMutableArray<AMapGeoFenceRegion*>* regions = [NSMutableArray arrayWithCapacity:regionsRefArray.count];
              for (int i = 0; i < regionsRefArray.count; i++) {
                  AMapGeoFenceRegion* item = (AMapGeoFenceRegion*) HEAP[[regionsRefArray objectAtIndex:i]];
                  [regions addObject:item];
              }
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
              // ref arg
              NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
              // ref
              id<AMapGeoFenceManagerDelegate> ref = (id<AMapGeoFenceManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref amapGeoFenceManager : manager didAddRegionForMonitoringFinished: regions customID: customID error: error];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidGeoFencesStatusChangedForRegioncustomIDerror_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapGeoFenceManager* manager = (AMapGeoFenceManager*) HEAP[@([args[@"manager"] integerValue])];
              // ref arg
              AMapGeoFenceRegion* region = (AMapGeoFenceRegion*) HEAP[@([args[@"region"] integerValue])];
              // jsonable arg
              NSString* customID = (NSString*) args[@"customID"];
              // ref arg
              NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
              // ref
              id<AMapGeoFenceManagerDelegate> ref = (id<AMapGeoFenceManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref amapGeoFenceManager : manager didGeoFencesStatusChangedForRegion: region customID: customID error: error];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationRegion::initWithIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              NSString* identifier = (NSString*) args[@"identifier"];
      
              // ref
              AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              AMapLocationRegion* result = [ref initWithIdentifier: identifier];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationRegion::containsCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
              CLLocationCoordinate2D coordinate;
              [coordinateValue getValue:&coordinate];
      
              // ref
              AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref containsCoordinate: coordinate];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationCircleRegion::initWithCenterRadiusidentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // struct arg
              NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
              CLLocationCoordinate2D center;
              [centerValue getValue:&center];
              // jsonable arg
              CLLocationDistance radius = [args[@"radius"] doubleValue];
              // jsonable arg
              NSString* identifier = (NSString*) args[@"identifier"];
      
              // ref
              AMapLocationCircleRegion* ref = (AMapLocationCircleRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              AMapLocationCircleRegion* result = [ref initWithCenter: center radius: radius identifier: identifier];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationPolygonRegion::initWithCoordinatesCountidentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // list arg
              NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
              CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
        
              for (int i = 0; i < coordinatesRefIdArray.count; i++) {
                  NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:i]];
                  CLLocationCoordinate2D coordinatesItem;
                  [coordinatesValue getValue:&coordinatesItem];
                  coordinates[i] = coordinatesItem;
              }
              // jsonable arg
              NSInteger count = [args[@"count"] integerValue];
              // jsonable arg
              NSString* identifier = (NSString*) args[@"identifier"];
      
              // ref
              AMapLocationPolygonRegion* ref = (AMapLocationPolygonRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              AMapLocationPolygonRegion* result = [ref initWithCoordinates: coordinates count: count identifier: identifier];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManager::headingAvailable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
        
      
              // invoke native method
              BOOL result = [AMapLocationManager headingAvailable];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManager::startUpdatingHeading_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref startUpdatingHeading ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManager::stopUpdatingHeading_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref stopUpdatingHeading ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManager::dismissHeadingCalibrationDisplay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref dismissHeadingCalibrationDisplay ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManager::startUpdatingLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref startUpdatingLocation ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManager::stopUpdatingLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
        
      
              // ref
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref stopUpdatingLocation ];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDoRequireLocationAuth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
              // ref arg
              CLLocationManager* locationManager = (CLLocationManager*) HEAP[@([args[@"locationManager"] integerValue])];
      
              // ref
              id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref amapLocationManager : manager doRequireLocationAuth: locationManager];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidFailWithError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
              // ref arg
              NSError* error = (NSError*) HEAP[@([args[@"error"] integerValue])];
      
              // ref
              id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref amapLocationManager : manager didFailWithError: error];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
              // ref arg
              CLLocation* location = (CLLocation*) HEAP[@([args[@"location"] integerValue])];
      
              // ref
              id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref amapLocationManager : manager didUpdateLocation: location];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocationreGeocode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
              // ref arg
              CLLocation* location = (CLLocation*) HEAP[@([args[@"location"] integerValue])];
              // ref arg
              AMapLocationReGeocode* reGeocode = (AMapLocationReGeocode*) HEAP[@([args[@"reGeocode"] integerValue])];
      
              // ref
              id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref amapLocationManager : manager didUpdateLocation: location reGeocode: reGeocode];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidChangeAuthorizationStatus_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
              // enum arg
              CLAuthorizationStatus status = (CLAuthorizationStatus) [args[@"status"] integerValue];
      
              // ref
              id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref amapLocationManager : manager didChangeAuthorizationStatus: status];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerShouldDisplayHeadingCalibration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
      
              // ref
              id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              BOOL result = [ref amapLocationManagerShouldDisplayHeadingCalibration: manager];
      
              // result
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationManagerDelegate::amapLocationManagerDidUpdateHeading_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // ref arg
              AMapLocationManager* manager = (AMapLocationManager*) HEAP[@([args[@"manager"] integerValue])];
              // ref arg
              CLHeading* newHeading = (CLHeading*) HEAP[@([args[@"newHeading"] integerValue])];
      
              // ref
              id<AMapLocationManagerDelegate> ref = (id<AMapLocationManagerDelegate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              // invoke native method
              [ref amapLocationManager : manager didUpdateHeading: newHeading];
      
              // result
              // 无返回值
              NSString* jsonableResult = @"success";
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapLocationPoint::locationWithLatitudeLongitude_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // args
              // jsonable arg
              CGFloat lat = [args[@"lat"] floatValue];
              // jsonable arg
              CGFloat lon = [args[@"lon"] floatValue];
      
              // ref
        
      
              // invoke native method
              AMapLocationPoint* result = [AMapLocationPoint locationWithLatitude: lat longitude: lon];
      
              // result
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      @"AMapGeoFenceManager::get_activeAction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceManager::get_activeAction");
          }
      
          // ref object
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoFenceActiveAction result = ref.activeAction;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceManager::get_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceManager::get_pausesLocationUpdatesAutomatically");
          }
      
          // ref object
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.pausesLocationUpdatesAutomatically;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceManager::get_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceManager::get_allowsBackgroundLocationUpdates");
          }
      
          // ref object
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.allowsBackgroundLocationUpdates;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceManager::get_detectRiskOfFakeLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceManager::get_detectRiskOfFakeLocation");
          }
      
          // ref object
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.detectRiskOfFakeLocation;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationRegion::get_identifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationRegion::get_identifier");
          }
      
          // ref object
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.identifier;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationRegion::get_notifyOnEntry": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationRegion::get_notifyOnEntry");
          }
      
          // ref object
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.notifyOnEntry;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationRegion::get_notifyOnExit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationRegion::get_notifyOnExit");
          }
      
          // ref object
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.notifyOnExit;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationCircleRegion::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationCircleRegion::get_center");
          }
      
          // ref object
          AMapLocationCircleRegion* ref = (AMapLocationCircleRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.center;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationCircleRegion::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationCircleRegion::get_radius");
          }
      
          // ref object
          AMapLocationCircleRegion* ref = (AMapLocationCircleRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationDistance result = ref.radius;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPolygonRegion::get_coordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPolygonRegion::get_coordinates");
          }
      
          // ref object
          AMapLocationPolygonRegion* ref = (AMapLocationPolygonRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D* result = ref.coordinates;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPolygonRegion::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPolygonRegion::get_count");
          }
      
          // ref object
          AMapLocationPolygonRegion* ref = (AMapLocationPolygonRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceRegion::get_identifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceRegion::get_identifier");
          }
      
          // ref object
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.identifier;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceRegion::get_customID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceRegion::get_customID");
          }
      
          // ref object
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.customID;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceRegion::get_fenceStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceRegion::get_fenceStatus");
          }
      
          // ref object
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoFenceRegionStatus result = ref.fenceStatus;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceRegion::get_regionType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceRegion::get_regionType");
          }
      
          // ref object
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapGeoFenceRegionType result = ref.regionType;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceRegion::get_currentLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceRegion::get_currentLocation");
          }
      
          // ref object
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocation* result = ref.currentLocation;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceCircleRegion::get_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceCircleRegion::get_center");
          }
      
          // ref object
          AMapGeoFenceCircleRegion* ref = (AMapGeoFenceCircleRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.center;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceCircleRegion::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceCircleRegion::get_radius");
          }
      
          // ref object
          AMapGeoFenceCircleRegion* ref = (AMapGeoFenceCircleRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationDistance result = ref.radius;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFencePolygonRegion::get_coordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFencePolygonRegion::get_coordinates");
          }
      
          // ref object
          AMapGeoFencePolygonRegion* ref = (AMapGeoFencePolygonRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D* result = ref.coordinates;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFencePolygonRegion::get_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFencePolygonRegion::get_count");
          }
      
          // ref object
          AMapGeoFencePolygonRegion* ref = (AMapGeoFencePolygonRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.count;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFencePOIRegion::get_POIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFencePOIRegion::get_POIItem");
          }
      
          // ref object
          AMapGeoFencePOIRegion* ref = (AMapGeoFencePOIRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapLocationPOIItem* result = ref.POIItem;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceDistrictRegion::get_districtItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceDistrictRegion::get_districtItem");
          }
      
          // ref object
          AMapGeoFenceDistrictRegion* ref = (AMapGeoFenceDistrictRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapLocationDistrictItem* result = ref.districtItem;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationManager::get_distanceFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::get_distanceFilter");
          }
      
          // ref object
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationDistance result = ref.distanceFilter;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationManager::get_desiredAccuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::get_desiredAccuracy");
          }
      
          // ref object
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationAccuracy result = ref.desiredAccuracy;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationManager::get_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::get_pausesLocationUpdatesAutomatically");
          }
      
          // ref object
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.pausesLocationUpdatesAutomatically;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationManager::get_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::get_allowsBackgroundLocationUpdates");
          }
      
          // ref object
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.allowsBackgroundLocationUpdates;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationManager::get_locationTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::get_locationTimeout");
          }
      
          // ref object
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.locationTimeout;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationManager::get_reGeocodeTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::get_reGeocodeTimeout");
          }
      
          // ref object
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSInteger result = ref.reGeocodeTimeout;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationManager::get_locatingWithReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::get_locatingWithReGeocode");
          }
      
          // ref object
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.locatingWithReGeocode;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationManager::get_reGeocodeLanguage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::get_reGeocodeLanguage");
          }
      
          // ref object
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapLocationReGeocodeLanguage result = ref.reGeocodeLanguage;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationManager::get_detectRiskOfFakeLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::get_detectRiskOfFakeLocation");
          }
      
          // ref object
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.detectRiskOfFakeLocation;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_formattedAddress");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.formattedAddress;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_country": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_country");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.country;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_province");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.province;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_city");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_district");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.district;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_township": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_township");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.township;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_neighborhood");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.neighborhood;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_building");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.building;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_citycode");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.citycode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_adcode");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.adcode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_street": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_street");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.street;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_number");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.number;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_POIName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_POIName");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.POIName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationReGeocode::get_AOIName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::get_AOIName");
          }
      
          // ref object
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.AOIName;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPoint::get_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPoint::get_latitude");
          }
      
          // ref object
          AMapLocationPoint* ref = (AMapLocationPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.latitude;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPoint::get_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPoint::get_longitude");
          }
      
          // ref object
          AMapLocationPoint* ref = (AMapLocationPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGFloat result = ref.longitude;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPOIItem::get_pId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::get_pId");
          }
      
          // ref object
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.pId;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPOIItem::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::get_name");
          }
      
          // ref object
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.name;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPOIItem::get_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::get_type");
          }
      
          // ref object
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.type;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPOIItem::get_typeCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::get_typeCode");
          }
      
          // ref object
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.typeCode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPOIItem::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::get_address");
          }
      
          // ref object
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.address;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPOIItem::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::get_location");
          }
      
          // ref object
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          AMapLocationPoint* result = ref.location;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPOIItem::get_tel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::get_tel");
          }
      
          // ref object
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.tel;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPOIItem::get_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::get_province");
          }
      
          // ref object
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.province;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPOIItem::get_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::get_city");
          }
      
          // ref object
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.city;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationPOIItem::get_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::get_district");
          }
      
          // ref object
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.district;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapLocationDistrictItem::get_cityCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationDistrictItem::get_cityCode");
          }
      
          // ref object
          AMapLocationDistrictItem* ref = (AMapLocationDistrictItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSString* result = ref.cityCode;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"AMapGeoFenceManager::get_activeAction_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoFenceActiveAction result = ref.activeAction;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceManager::get_pausesLocationUpdatesAutomatically_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.pausesLocationUpdatesAutomatically;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceManager::get_allowsBackgroundLocationUpdates_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.allowsBackgroundLocationUpdates;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceManager::get_detectRiskOfFakeLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.detectRiskOfFakeLocation;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationRegion::get_identifier_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.identifier;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationRegion::get_notifyOnEntry_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.notifyOnEntry;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationRegion::get_notifyOnExit_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.notifyOnExit;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationCircleRegion::get_center_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationCircleRegion* ref = (AMapLocationCircleRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.center;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationCircleRegion::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationCircleRegion* ref = (AMapLocationCircleRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationDistance result = ref.radius;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPolygonRegion::get_coordinates_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPolygonRegion* ref = (AMapLocationPolygonRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D* result = ref.coordinates;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPolygonRegion::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPolygonRegion* ref = (AMapLocationPolygonRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceRegion::get_identifier_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.identifier;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceRegion::get_customID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.customID;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceRegion::get_fenceStatus_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoFenceRegionStatus result = ref.fenceStatus;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceRegion::get_regionType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapGeoFenceRegionType result = ref.regionType;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceRegion::get_currentLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocation* result = ref.currentLocation;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceCircleRegion::get_center_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceCircleRegion* ref = (AMapGeoFenceCircleRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D result = ref.center;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceCircleRegion::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceCircleRegion* ref = (AMapGeoFenceCircleRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationDistance result = ref.radius;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFencePolygonRegion::get_coordinates_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFencePolygonRegion* ref = (AMapGeoFencePolygonRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationCoordinate2D* result = ref.coordinates;
      
              // 返回值: 结构体
              NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
              HEAP[@(resultValue.hash)] = resultValue;
              NSNumber* jsonableResult = @(resultValue.hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFencePolygonRegion::get_count_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFencePolygonRegion* ref = (AMapGeoFencePolygonRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.count;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFencePOIRegion::get_POIItem_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFencePOIRegion* ref = (AMapGeoFencePOIRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapLocationPOIItem* result = ref.POIItem;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceDistrictRegion::get_districtItem_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapGeoFenceDistrictRegion* ref = (AMapGeoFenceDistrictRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapLocationDistrictItem* result = ref.districtItem;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationManager::get_distanceFilter_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationDistance result = ref.distanceFilter;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationManager::get_desiredAccuracy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CLLocationAccuracy result = ref.desiredAccuracy;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationManager::get_pausesLocationUpdatesAutomatically_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.pausesLocationUpdatesAutomatically;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationManager::get_allowsBackgroundLocationUpdates_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.allowsBackgroundLocationUpdates;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationManager::get_locationTimeout_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.locationTimeout;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationManager::get_reGeocodeTimeout_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSInteger result = ref.reGeocodeTimeout;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationManager::get_locatingWithReGeocode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.locatingWithReGeocode;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationManager::get_reGeocodeLanguage_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapLocationReGeocodeLanguage result = ref.reGeocodeLanguage;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationManager::get_detectRiskOfFakeLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              BOOL result = ref.detectRiskOfFakeLocation;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_formattedAddress_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.formattedAddress;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_country_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.country;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_province_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.province;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_district_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.district;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_township_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.township;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_neighborhood_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.neighborhood;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_building_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.building;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_citycode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.citycode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_adcode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.adcode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_street_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.street;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_number_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.number;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_POIName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.POIName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationReGeocode::get_AOIName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.AOIName;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPoint::get_latitude_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPoint* ref = (AMapLocationPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.latitude;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPoint::get_longitude_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPoint* ref = (AMapLocationPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              CGFloat result = ref.longitude;
      
              // 返回值: Value
              id jsonableResult = @(result);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPOIItem::get_pId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.pId;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPOIItem::get_name_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.name;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPOIItem::get_type_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.type;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPOIItem::get_typeCode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.typeCode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPOIItem::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.address;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPOIItem::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              AMapLocationPoint* result = ref.location;
      
              // return a ref
              HEAP[@((result).hash)] = result;
              NSNumber* jsonableResult = @((result).hash);
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPOIItem::get_tel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.tel;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPOIItem::get_province_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.province;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPOIItem::get_city_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.city;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationPOIItem::get_district_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.district;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapLocationDistrictItem::get_cityCode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray* resultList = [NSMutableArray array];
      
          for (int i = 0; i < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; i++) {
              NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:i];
      
              // ref object
              AMapLocationDistrictItem* ref = (AMapLocationDistrictItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
              NSString* result = ref.cityCode;
      
              // 返回值: jsonable
              id jsonableResult = result;
      
              [resultList addObject:jsonableResult];
          }
      
          methodResult(resultList);
      },
      
      @"AMapGeoFenceManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceManager::set_delegate");
          }
      
          // args
      
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceManager::set_activeAction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceManager::set_activeAction");
          }
      
          // args
          // enum arg
          AMapGeoFenceActiveAction activeAction = (AMapGeoFenceActiveAction) [args[@"activeAction"] integerValue];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.activeAction = activeAction;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceManager::set_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceManager::set_pausesLocationUpdatesAutomatically");
          }
      
          // args
          // jsonable arg
          BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceManager::set_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceManager::set_allowsBackgroundLocationUpdates");
          }
      
          // args
          // jsonable arg
          BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceManager::set_detectRiskOfFakeLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceManager::set_detectRiskOfFakeLocation");
          }
      
          // args
          // jsonable arg
          BOOL detectRiskOfFakeLocation = [args[@"detectRiskOfFakeLocation"] boolValue];
      
          // ref
          AMapGeoFenceManager* ref = (AMapGeoFenceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.detectRiskOfFakeLocation = detectRiskOfFakeLocation;
          methodResult(@"success");
      },
      
      @"AMapLocationRegion::set_notifyOnEntry": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationRegion::set_notifyOnEntry");
          }
      
          // args
          // jsonable arg
          BOOL notifyOnEntry = [args[@"notifyOnEntry"] boolValue];
      
          // ref
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.notifyOnEntry = notifyOnEntry;
          methodResult(@"success");
      },
      
      @"AMapLocationRegion::set_notifyOnExit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationRegion::set_notifyOnExit");
          }
      
          // args
          // jsonable arg
          BOOL notifyOnExit = [args[@"notifyOnExit"] boolValue];
      
          // ref
          AMapLocationRegion* ref = (AMapLocationRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.notifyOnExit = notifyOnExit;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceRegion::set_fenceStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceRegion::set_fenceStatus");
          }
      
          // args
          // enum arg
          AMapGeoFenceRegionStatus fenceStatus = (AMapGeoFenceRegionStatus) [args[@"fenceStatus"] integerValue];
      
          // ref
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.fenceStatus = fenceStatus;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceRegion::set_regionType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceRegion::set_regionType");
          }
      
          // args
          // enum arg
          AMapGeoFenceRegionType regionType = (AMapGeoFenceRegionType) [args[@"regionType"] integerValue];
      
          // ref
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.regionType = regionType;
          methodResult(@"success");
      },
      
      @"AMapGeoFenceRegion::set_currentLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapGeoFenceRegion::set_currentLocation");
          }
      
          // args
          // ref arg
          CLLocation* currentLocation = (CLLocation*) HEAP[@([args[@"currentLocation"] integerValue])];
      
          // ref
          AMapGeoFenceRegion* ref = (AMapGeoFenceRegion*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.currentLocation = currentLocation;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::set_delegate");
          }
      
          // args
      
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_distanceFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::set_distanceFilter");
          }
      
          // args
          // jsonable arg
          CLLocationDistance distanceFilter = [args[@"distanceFilter"] doubleValue];
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.distanceFilter = distanceFilter;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_desiredAccuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::set_desiredAccuracy");
          }
      
          // args
          // jsonable arg
          CLLocationAccuracy desiredAccuracy = [args[@"desiredAccuracy"] doubleValue];
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.desiredAccuracy = desiredAccuracy;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::set_pausesLocationUpdatesAutomatically");
          }
      
          // args
          // jsonable arg
          BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::set_allowsBackgroundLocationUpdates");
          }
      
          // args
          // jsonable arg
          BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_locationTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::set_locationTimeout");
          }
      
          // args
          // jsonable arg
          NSInteger locationTimeout = [args[@"locationTimeout"] integerValue];
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.locationTimeout = locationTimeout;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_reGeocodeTimeout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::set_reGeocodeTimeout");
          }
      
          // args
          // jsonable arg
          NSInteger reGeocodeTimeout = [args[@"reGeocodeTimeout"] integerValue];
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.reGeocodeTimeout = reGeocodeTimeout;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_locatingWithReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::set_locatingWithReGeocode");
          }
      
          // args
          // jsonable arg
          BOOL locatingWithReGeocode = [args[@"locatingWithReGeocode"] boolValue];
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.locatingWithReGeocode = locatingWithReGeocode;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_reGeocodeLanguage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::set_reGeocodeLanguage");
          }
      
          // args
          // enum arg
          AMapLocationReGeocodeLanguage reGeocodeLanguage = (AMapLocationReGeocodeLanguage) [args[@"reGeocodeLanguage"] integerValue];
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.reGeocodeLanguage = reGeocodeLanguage;
          methodResult(@"success");
      },
      
      @"AMapLocationManager::set_detectRiskOfFakeLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationManager::set_detectRiskOfFakeLocation");
          }
      
          // args
          // jsonable arg
          BOOL detectRiskOfFakeLocation = [args[@"detectRiskOfFakeLocation"] boolValue];
      
          // ref
          AMapLocationManager* ref = (AMapLocationManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.detectRiskOfFakeLocation = detectRiskOfFakeLocation;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_formattedAddress": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_formattedAddress");
          }
      
          // args
          // jsonable arg
          NSString* formattedAddress = (NSString*) args[@"formattedAddress"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.formattedAddress = formattedAddress;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_country": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_country");
          }
      
          // args
          // jsonable arg
          NSString* country = (NSString*) args[@"country"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.country = country;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_province");
          }
      
          // args
          // jsonable arg
          NSString* province = (NSString*) args[@"province"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.province = province;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_district");
          }
      
          // args
          // jsonable arg
          NSString* district = (NSString*) args[@"district"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.district = district;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_township": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_township");
          }
      
          // args
          // jsonable arg
          NSString* township = (NSString*) args[@"township"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.township = township;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_neighborhood": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_neighborhood");
          }
      
          // args
          // jsonable arg
          NSString* neighborhood = (NSString*) args[@"neighborhood"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.neighborhood = neighborhood;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_building": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_building");
          }
      
          // args
          // jsonable arg
          NSString* building = (NSString*) args[@"building"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.building = building;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_citycode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_citycode");
          }
      
          // args
          // jsonable arg
          NSString* citycode = (NSString*) args[@"citycode"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.citycode = citycode;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_adcode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_adcode");
          }
      
          // args
          // jsonable arg
          NSString* adcode = (NSString*) args[@"adcode"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.adcode = adcode;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_street": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_street");
          }
      
          // args
          // jsonable arg
          NSString* street = (NSString*) args[@"street"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.street = street;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_number");
          }
      
          // args
          // jsonable arg
          NSString* number = (NSString*) args[@"number"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.number = number;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_POIName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_POIName");
          }
      
          // args
          // jsonable arg
          NSString* POIName = (NSString*) args[@"POIName"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.POIName = POIName;
          methodResult(@"success");
      },
      
      @"AMapLocationReGeocode::set_AOIName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationReGeocode::set_AOIName");
          }
      
          // args
          // jsonable arg
          NSString* AOIName = (NSString*) args[@"AOIName"];
      
          // ref
          AMapLocationReGeocode* ref = (AMapLocationReGeocode*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.AOIName = AOIName;
          methodResult(@"success");
      },
      
      @"AMapLocationPoint::set_latitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPoint::set_latitude");
          }
      
          // args
          // jsonable arg
          CGFloat latitude = [args[@"latitude"] floatValue];
      
          // ref
          AMapLocationPoint* ref = (AMapLocationPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.latitude = latitude;
          methodResult(@"success");
      },
      
      @"AMapLocationPoint::set_longitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPoint::set_longitude");
          }
      
          // args
          // jsonable arg
          CGFloat longitude = [args[@"longitude"] floatValue];
      
          // ref
          AMapLocationPoint* ref = (AMapLocationPoint*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.longitude = longitude;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_pId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::set_pId");
          }
      
          // args
          // jsonable arg
          NSString* pId = (NSString*) args[@"pId"];
      
          // ref
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.pId = pId;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::set_name");
          }
      
          // args
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
      
          // ref
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.name = name;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_type": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::set_type");
          }
      
          // args
          // jsonable arg
          NSString* type = (NSString*) args[@"type"];
      
          // ref
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.type = type;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_typeCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::set_typeCode");
          }
      
          // args
          // jsonable arg
          NSString* typeCode = (NSString*) args[@"typeCode"];
      
          // ref
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.typeCode = typeCode;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::set_address");
          }
      
          // args
          // jsonable arg
          NSString* address = (NSString*) args[@"address"];
      
          // ref
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.address = address;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::set_location");
          }
      
          // args
          // ref arg
          AMapLocationPoint* location = (AMapLocationPoint*) HEAP[@([args[@"location"] integerValue])];
      
          // ref
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.location = location;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_tel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::set_tel");
          }
      
          // args
          // jsonable arg
          NSString* tel = (NSString*) args[@"tel"];
      
          // ref
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.tel = tel;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::set_province");
          }
      
          // args
          // jsonable arg
          NSString* province = (NSString*) args[@"province"];
      
          // ref
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.province = province;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::set_city");
          }
      
          // args
          // jsonable arg
          NSString* city = (NSString*) args[@"city"];
      
          // ref
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.city = city;
          methodResult(@"success");
      },
      
      @"AMapLocationPOIItem::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationPOIItem::set_district");
          }
      
          // args
          // jsonable arg
          NSString* district = (NSString*) args[@"district"];
      
          // ref
          AMapLocationPOIItem* ref = (AMapLocationPOIItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.district = district;
          methodResult(@"success");
      },
      
      @"AMapLocationDistrictItem::set_cityCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"AMapLocationDistrictItem::set_cityCode");
          }
      
          // args
          // jsonable arg
          NSString* cityCode = (NSString*) args[@"cityCode"];
      
          // ref
          AMapLocationDistrictItem* ref = (AMapLocationDistrictItem*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.cityCode = cityCode;
          methodResult(@"success");
      },
      
      @"RefClass::isKindOfAMapGeoFenceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFenceManager class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationCircleRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationPolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationPolygonRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFenceRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoFenceCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFenceCircleRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoFencePolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFencePolygonRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoFencePOIRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFencePOIRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapGeoFenceDistrictRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapGeoFenceDistrictRegion class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationManager class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationReGeocode class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationPoint class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationPOIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationPOIItem class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfAMapLocationDistrictItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          BOOL isTargetType = [ref isKindOfClass:[AMapLocationDistrictItem class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::asAMapGeoFenceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeoFenceManager *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocationRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocationRegion *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocationCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocationCircleRegion *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocationPolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocationPolygonRegion *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeoFenceRegion *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapGeoFenceCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeoFenceCircleRegion *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapGeoFencePolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeoFencePolygonRegion *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapGeoFencePOIRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeoFencePOIRegion *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapGeoFenceDistrictRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapGeoFenceDistrictRegion *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocationManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocationManager *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocationReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocationReGeocode *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocationPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocationPoint *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocationPOIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocationPOIItem *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"RefClass::asAMapLocationDistrictItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // 引用对象
          NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
          id ref = HEAP[refId];
      
          // 转型
          ref = (AMapLocationDistrictItem *) ref;
          // 放回HEAP
          HEAP[refId] = ref;
      
          methodResult(refId);
      },
      
      @"ObjectFactory::createAMapGeoFenceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeoFenceManager");
          }
      
          AMapGeoFenceManager* ref = [[AMapGeoFenceManager alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocationRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocationRegion");
          }
      
          AMapLocationRegion* ref = [[AMapLocationRegion alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocationCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocationCircleRegion");
          }
      
          AMapLocationCircleRegion* ref = [[AMapLocationCircleRegion alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocationPolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocationPolygonRegion");
          }
      
          AMapLocationPolygonRegion* ref = [[AMapLocationPolygonRegion alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeoFenceRegion");
          }
      
          AMapGeoFenceRegion* ref = [[AMapGeoFenceRegion alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapGeoFenceCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeoFenceCircleRegion");
          }
      
          AMapGeoFenceCircleRegion* ref = [[AMapGeoFenceCircleRegion alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapGeoFencePolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeoFencePolygonRegion");
          }
      
          AMapGeoFencePolygonRegion* ref = [[AMapGeoFencePolygonRegion alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapGeoFencePOIRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeoFencePOIRegion");
          }
      
          AMapGeoFencePOIRegion* ref = [[AMapGeoFencePOIRegion alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapGeoFenceDistrictRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapGeoFenceDistrictRegion");
          }
      
          AMapGeoFenceDistrictRegion* ref = [[AMapGeoFenceDistrictRegion alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocationManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocationManager");
          }
      
          AMapLocationManager* ref = [[AMapLocationManager alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocationReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocationReGeocode");
          }
      
          AMapLocationReGeocode* ref = [[AMapLocationReGeocode alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocationPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocationPoint");
          }
      
          AMapLocationPoint* ref = [[AMapLocationPoint alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocationPOIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocationPOIItem");
          }
      
          AMapLocationPOIItem* ref = [[AMapLocationPOIItem alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createAMapLocationDistrictItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createAMapLocationDistrictItem");
          }
      
          AMapLocationDistrictItem* ref = [[AMapLocationDistrictItem alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeoFenceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeoFenceManager* ref = [[AMapGeoFenceManager alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocationRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocationRegion* ref = [[AMapLocationRegion alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocationCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocationCircleRegion* ref = [[AMapLocationCircleRegion alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocationPolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocationPolygonRegion* ref = [[AMapLocationPolygonRegion alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeoFenceRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeoFenceRegion* ref = [[AMapGeoFenceRegion alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeoFenceCircleRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeoFenceCircleRegion* ref = [[AMapGeoFenceCircleRegion alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeoFencePolygonRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeoFencePolygonRegion* ref = [[AMapGeoFencePolygonRegion alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeoFencePOIRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeoFencePOIRegion* ref = [[AMapGeoFencePOIRegion alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapGeoFenceDistrictRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapGeoFenceDistrictRegion* ref = [[AMapGeoFenceDistrictRegion alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocationManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocationManager* ref = [[AMapLocationManager alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocationReGeocode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocationReGeocode* ref = [[AMapLocationReGeocode alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocationPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocationPoint* ref = [[AMapLocationPoint alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocationPOIItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocationPOIItem* ref = [[AMapLocationPOIItem alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::create_batchAMapLocationDistrictItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
          NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
      
          for (int i = 0; i < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; i++) {
              AMapLocationDistrictItem* ref = [[AMapLocationDistrictItem alloc] init];
              HEAP[@(ref.hash)] = ref;
      
              [resultList addObject:@(ref.hash)];
          }
      
          methodResult(resultList);
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"AMapLocationCoordinateConvert::AMapLocationCoordinateConvert": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // enum arg
          AMapLocationCoordinateType type = (AMapLocationCoordinateType) [args[@"type"] integerValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationCoordinateConvert::AMapLocationCoordinateConvert(暂未实现参数打印)");
          }
      
          // invoke native method
          CLLocationCoordinate2D result = AMapLocationCoordinateConvert(coordinate, type);
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"AMapLocationDataAvailableForCoordinate::AMapLocationDataAvailableForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: AMapLocationDataAvailableForCoordinate::AMapLocationDataAvailableForCoordinate(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = AMapLocationDataAvailableForCoordinate(coordinate);
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
    };
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"me.yohom/amap_location_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[AmapLocationFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, [methodCall arguments], methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们
- (void)amapGeoFenceManager : (AMapGeoFenceManager*)manager doRequireLocationAuth: (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDoRequireLocationAuth");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* arglocationManager = @(locationManager.hash);
  HEAP[arglocationManager] = locationManager;

  [channel invokeMethod:@"Callback::AMapGeoFenceManagerDelegate::amapGeoFenceManagerDoRequireLocationAuth" arguments:@{@"manager": argmanager, @"locationManager": arglocationManager}];
  
}

- (void)amapGeoFenceManager : (AMapGeoFenceManager*)manager didAddRegionForMonitoringFinished: (NSArray<AMapGeoFenceRegion*>*)regions customID: (NSString*)customID error: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidAddRegionForMonitoringFinishedcustomIDerror");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // list callback arg
  NSMutableArray<NSNumber*>* argregions = [NSMutableArray arrayWithCapacity:regions.count];
  for (int i = 0; i < regions.count; i++) {
      NSObject* item = ((NSObject*) [regions objectAtIndex:i]);
      // return to dart side data
      argregions[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }
  // jsonable callback arg
  NSString* argcustomID = customID;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidAddRegionForMonitoringFinishedcustomIDerror" arguments:@{@"manager": argmanager, @"regions": argregions, @"customID": argcustomID, @"error": argerror}];
  
}

- (void)amapGeoFenceManager : (AMapGeoFenceManager*)manager didGeoFencesStatusChangedForRegion: (AMapGeoFenceRegion*)region customID: (NSString*)customID error: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidGeoFencesStatusChangedForRegioncustomIDerror");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;
  // jsonable callback arg
  NSString* argcustomID = customID;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidGeoFencesStatusChangedForRegioncustomIDerror" arguments:@{@"manager": argmanager, @"region": argregion, @"customID": argcustomID, @"error": argerror}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager doRequireLocationAuth: (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDoRequireLocationAuth");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* arglocationManager = @(locationManager.hash);
  HEAP[arglocationManager] = locationManager;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDoRequireLocationAuth" arguments:@{@"manager": argmanager, @"locationManager": arglocationManager}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didFailWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidFailWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidFailWithError" arguments:@{@"manager": argmanager, @"error": argerror}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didUpdateLocation: (CLLocation*)location
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* arglocation = @(location.hash);
  HEAP[arglocation] = location;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocation" arguments:@{@"manager": argmanager, @"location": arglocation}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didUpdateLocation: (CLLocation*)location reGeocode: (AMapLocationReGeocode*)reGeocode
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocationreGeocode");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* arglocation = @(location.hash);
  HEAP[arglocation] = location;
  // ref callback arg
  NSNumber* argreGeocode = @(reGeocode.hash);
  HEAP[argreGeocode] = reGeocode;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocationreGeocode" arguments:@{@"manager": argmanager, @"location": arglocation, @"reGeocode": argreGeocode}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didChangeAuthorizationStatus: (CLAuthorizationStatus)status
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidChangeAuthorizationStatus");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // enum callback arg
  NSNumber* argstatus = @((NSInteger) status);

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidChangeAuthorizationStatus" arguments:@{@"manager": argmanager, @"status": argstatus}];
  
}

- (BOOL)amapLocationManagerShouldDisplayHeadingCalibration : (AMapLocationManager*)manager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerShouldDisplayHeadingCalibration");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerShouldDisplayHeadingCalibration"
              arguments:@{}
                 result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return NO;
}

- (void)amapLocationManager : (AMapLocationManager*)manager didUpdateHeading: (CLHeading*)newHeading
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidUpdateHeading");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argnewHeading = @(newHeading.hash);
  HEAP[argnewHeading] = newHeading;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidUpdateHeading" arguments:@{@"manager": argmanager, @"newHeading": argnewHeading}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didStartMonitoringForRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidStartMonitoringForRegion");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidStartMonitoringForRegion" arguments:@{@"manager": argmanager, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didEnterRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidEnterRegion");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidEnterRegion" arguments:@{@"manager": argmanager, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didExitRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidExitRegion");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidExitRegion" arguments:@{@"manager": argmanager, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didDetermineState: (AMapLocationRegionState)state forRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidDetermineStateforRegion");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // enum callback arg
  NSNumber* argstate = @((NSInteger) state);
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidDetermineStateforRegion" arguments:@{@"manager": argmanager, @"state": argstate, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager monitoringDidFailForRegion: (AMapLocationRegion*)region withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerMonitoringDidFailForRegionwithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerMonitoringDidFailForRegionwithError" arguments:@{@"manager": argmanager, @"region": argregion, @"error": argerror}];
  
}


@end