//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "AmapLocationFluttifyPlugin.h"
#import <objc/runtime.h>
#import "SubHandler/SubHandler0.h"
#import "SubHandler/SubHandler1.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapLocationFluttifyPlugin {
  NSMutableDictionary<NSString*, Handler>* _handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{}.mutableCopy;

    [_handlerMap addEntriesFromDictionary: [self getSubHandler0]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler1]];
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"me.yohom/amap_location_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[AmapLocationFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, [methodCall arguments], methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们
- (void)amapGeoFenceManager : (AMapGeoFenceManager*)manager doRequireLocationAuth: (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDoRequireLocationAuth");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* arglocationManager = @(locationManager.hash);
  HEAP[arglocationManager] = locationManager;

  [channel invokeMethod:@"Callback::AMapGeoFenceManagerDelegate::amapGeoFenceManagerDoRequireLocationAuth" arguments:@{@"manager": argmanager, @"locationManager": arglocationManager}];
  
}

- (void)amapGeoFenceManager : (AMapGeoFenceManager*)manager didAddRegionForMonitoringFinished: (NSArray<AMapGeoFenceRegion*>*)regions customID: (NSString*)customID error: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidAddRegionForMonitoringFinishedcustomIDerror");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // list callback arg
  NSMutableArray<NSNumber*>* argregions = [NSMutableArray arrayWithCapacity:regions.count];
  for (int i = 0; i < regions.count; i++) {
      NSObject* item = ((NSObject*) [regions objectAtIndex:i]);
      // return to dart side data
      argregions[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }
  // jsonable callback arg
  NSString* argcustomID = customID;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidAddRegionForMonitoringFinishedcustomIDerror" arguments:@{@"manager": argmanager, @"regions": argregions, @"customID": argcustomID, @"error": argerror}];
  
}

- (void)amapGeoFenceManager : (AMapGeoFenceManager*)manager didGeoFencesStatusChangedForRegion: (AMapGeoFenceRegion*)region customID: (NSString*)customID error: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapGeoFenceManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidGeoFencesStatusChangedForRegioncustomIDerror");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;
  // jsonable callback arg
  NSString* argcustomID = customID;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapGeoFenceManagerDelegate::amapGeoFenceManagerDidGeoFencesStatusChangedForRegioncustomIDerror" arguments:@{@"manager": argmanager, @"region": argregion, @"customID": argcustomID, @"error": argerror}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager doRequireLocationAuth: (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDoRequireLocationAuth");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* arglocationManager = @(locationManager.hash);
  HEAP[arglocationManager] = locationManager;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDoRequireLocationAuth" arguments:@{@"manager": argmanager, @"locationManager": arglocationManager}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didFailWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidFailWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidFailWithError" arguments:@{@"manager": argmanager, @"error": argerror}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didUpdateLocation: (CLLocation*)location
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* arglocation = @(location.hash);
  HEAP[arglocation] = location;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocation" arguments:@{@"manager": argmanager, @"location": arglocation}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didUpdateLocation: (CLLocation*)location reGeocode: (AMapLocationReGeocode*)reGeocode
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocationreGeocode");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* arglocation = @(location.hash);
  HEAP[arglocation] = location;
  // ref callback arg
  NSNumber* argreGeocode = @(reGeocode.hash);
  HEAP[argreGeocode] = reGeocode;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidUpdateLocationreGeocode" arguments:@{@"manager": argmanager, @"location": arglocation, @"reGeocode": argreGeocode}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didChangeAuthorizationStatus: (CLAuthorizationStatus)status
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidChangeAuthorizationStatus");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // enum callback arg
  NSNumber* argstatus = @((NSInteger) status);

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidChangeAuthorizationStatus" arguments:@{@"manager": argmanager, @"status": argstatus}];
  
}

- (BOOL)amapLocationManagerShouldDisplayHeadingCalibration : (AMapLocationManager*)manager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerShouldDisplayHeadingCalibration");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerShouldDisplayHeadingCalibration"
              arguments:@{}
                 result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return NO;
}

- (void)amapLocationManager : (AMapLocationManager*)manager didUpdateHeading: (CLHeading*)newHeading
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidUpdateHeading");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argnewHeading = @(newHeading.hash);
  HEAP[argnewHeading] = newHeading;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidUpdateHeading" arguments:@{@"manager": argmanager, @"newHeading": argnewHeading}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didStartMonitoringForRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidStartMonitoringForRegion");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidStartMonitoringForRegion" arguments:@{@"manager": argmanager, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didEnterRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidEnterRegion");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidEnterRegion" arguments:@{@"manager": argmanager, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didExitRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidExitRegion");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidExitRegion" arguments:@{@"manager": argmanager, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager didDetermineState: (AMapLocationRegionState)state forRegion: (AMapLocationRegion*)region
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerDidDetermineStateforRegion");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // enum callback arg
  NSNumber* argstate = @((NSInteger) state);
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerDidDetermineStateforRegion" arguments:@{@"manager": argmanager, @"state": argstate, @"region": argregion}];
  
}

- (void)amapLocationManager : (AMapLocationManager*)manager monitoringDidFailForRegion: (AMapLocationRegion*)region withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"AMapLocationManagerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"AMapLocationManagerDelegate::amapLocationManagerMonitoringDidFailForRegionwithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = @(manager.hash);
  HEAP[argmanager] = manager;
  // ref callback arg
  NSNumber* argregion = @(region.hash);
  HEAP[argregion] = region;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::AMapLocationManagerDelegate::amapLocationManagerMonitoringDidFailForRegionwithError" arguments:@{@"manager": argmanager, @"region": argregion, @"error": argerror}];
  
}


@end